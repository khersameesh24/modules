nextflow_process {

    name "Test Process XENIUMRANGER_RESEGMENT"
    script "../main.nf"
    process "XENIUMRANGER_RESEGMENT"
    config "./nextflow.config"

    tag "modules"
    tag "modules_nfcore"
    tag "xeniumranger"
    tag "xeniumranger/resegment"
    tag "untar"

    setup {
            run("UNTAR") {
                script "modules/nf-core/untar/main.nf"
                process {
                    """
                    input[0] = [[], file('https://raw.githubusercontent.com/nf-core/test-datasets/spatialxe/Xenium_Prime_Mouse_Ileum_tiny_outs.tar.gz', checkIfExists: true)]
                    """
                }
            }
    }

    test("xeniumranger resegment") {
        when {
            process {
                """
                input[0] = UNTAR.out.untar.map{ meta, files -> [ [ id:'test_xeniumranger_resegment' ], file(files)]}
                """
            }
        }
        then {
            process.out.bundle.view()
            assertAll(
                { assert process.success },
                { assert process.out.bundle != null },
                { assert file(process.out.bundle.get(0).get(1).find { file(it).name == 'analysis_summary.html' }).exists() },
                { assert file(process.out.bundle.get(0).get(1).find { file(it).name == 'cells.csv.gz' }).exists() },
                { assert file(process.out.bundle.get(0).get(1).find { file(it).name == 'cells.parquet' }).exists() },
                { assert file(process.out.bundle.get(0).get(1).find { file(it).name == 'cells.zarr.zip' }).exists() },
                { assert file(process.out.bundle.get(0).get(1).find { file(it).name == 'transcripts.parquet' }).exists() },
                { assert file(process.out.bundle.get(0).get(1).find { file(it).name == 'transcripts.zarr.zip' }).exists() },
                { assert file(process.out.bundle.get(0).get(1).find { file(it).name == 'analysis.zarr.zip' }).exists() },
                { assert path(process.out.bundle.get(0).get(1).find { file(it).name == 'cell_feature_matrix.zarr.zip' }).exists() }
            )
        }
    }

    test("xeniumranger resegment stub") {
        options "-stub"
        when {
            process {
                """
                input[0] = UNTAR.out.untar.map{ meta, files -> [ [ id:'test_xeniumranger_resegment' ], file(files)]}
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }
}